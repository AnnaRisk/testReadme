package cloud.autotests.tests;

import cloud.autotests.helpers.DriverUtils;
import com.codeborne.selenide.Selenide;
import io.qameta.allure.Description;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import static com.codeborne.selenide.Condition.text;
import static com.codeborne.selenide.Selenide.*;
import static io.qameta.allure.Allure.step;
import static org.assertj.core.api.Assertions.assertThat;


public class GeneratedTests extends TestBase {

    @Test
    @Description("Autogenerated test")
    @DisplayName("Page title should have header text")
    void titleTest() {
        step("Открываем страницу hh", () ->
                open("/vacancy/55442983?from=vacancy_search_list&hhtmFrom=vacancy_search_list&query=qa"));

        step("Page title should have text 'Вакансия QA automation / AQA в Москве, работа в компании Системы Распределенного Реестра'", () -> {
            String expectedTitle = "Вакансия QA automation / AQA в Москве, работа в компании Системы Распределенного Реестра";
            String actualTitle = title();

            assertThat(actualTitle).isEqualTo(expectedTitle);
        });
    }

    @Test
    @Description("Autogenerated test")
    @DisplayName("Page console log should not have errors")
    void consoleShouldNotHaveErrorsTest() {
        step("Open url '/vacancy/55442983?from=vacancy_search_list&hhtmFrom=vacancy_search_list&query=qa'", () ->
                open("/vacancy/55442983?from=vacancy_search_list&hhtmFrom=vacancy_search_list&query=qa"));

        step("Console logs should not contain text 'SEVERE'", () -> {
            String consoleLogs = DriverUtils.getConsoleLogs();
            String errorText = "SEVERE";

            assertThat(consoleLogs).doesNotContain(errorText);
        });
    }

    @Test
    @Description("Soon to be implemented by you (or QA.GURU engineers)")
    @DisplayName("Проверка навыков")
    void generatedTest2() {
        step("Открыть страницу вакансии", () -> {
            Selenide.open("/vacancy/55442983?from=vacancy_search_list&hhtmFrom=vacancy_search_list&query=qa");
        });

        step("Проверить название компании", () -> {
            $x("//span[text()='Системы Распределенного Реестра']").shouldHave(text("Системы Распределенного Реестра"));
        });

        step("Проверить навык API", () -> {
            $x("//span[text()='Продолжить']").shouldHave(text("Продолжить"));
        });

    }

    @Test
    @Description("Soon to be implemented by you (or QA.GURU engineers)")
    @DisplayName("Проверка заполнения поля значением email")
    void generatedTest3() {
        step("Открыть страницу вакансии", () -> {
            Selenide.open("/vacancy/55442983?from=vacancy_search_list&hhtmFrom=vacancy_search_list&query=qa");
        });


        step("Нажать кнопку откликнуться", () -> {
            $(".bloko-form-item").click();
        });

        step("Вводим корректный email", () -> {
            $("[name=login]").setValue("annatest111@gmail.com");
        });

        step("Вводим некорректный email", () -> {
            $("[name=login]").setValue("!№;%:?annatest   111gmail.com");
        });

        step("Нажимаем Продолжить", () -> {
            $(".signup-submit").click();
        });

        step("Проверить текст ошибки", () -> {
            $x("//*[@class=\"bloko-form-error bloko-form-error_entering\"]").shouldHave(text("Пожалуйста, укажите email или телефон"));
        });
    }

    @Test
    @Description("Soon to be implemented by you (or QA.GURU engineers)")
    @DisplayName("Проверка опыта работы")
    void сheckAction() {

        step("Открыть страницу вакансии", () -> {
            Selenide.open("/vacancy/55442983?from=vacancy_search_list&hhtmFrom=vacancy_search_list&query=qa");
        });


        step("Проверить текст ошибки", () -> {
            $x("//span[text()='3–6 лет']").shouldHave(text("3–6 лет"));;
        });

    }
}